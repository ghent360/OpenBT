Index: avrcp/Makefile.am
===================================================================
--- avrcp.orig/Makefile.am	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/Makefile.am	2015-02-02 01:12:23.388044560 -0800
@@ -430,6 +430,10 @@
 
 AM_CFLAGS += @DBUS_CFLAGS@ @GLIB_CFLAGS@
 
+if AVCP_UINPUT
+AM_CFLAGS += -DAVCTP_UINPUT
+endif
+
 INCLUDES = -I$(builddir)/lib -I$(builddir)/src -I$(srcdir)/src \
 			-I$(srcdir)/audio -I$(srcdir)/sbc -I$(srcdir)/gdbus \
 			-I$(srcdir)/attrib -I$(srcdir)/btio -I$(srcdir)/tools \
Index: avrcp/acinclude.m4
===================================================================
--- avrcp.orig/acinclude.m4	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/acinclude.m4	2015-02-02 01:12:05.875957723 -0800
@@ -182,6 +182,7 @@
 	gstreamer_enable=${gstreamer_found}
 	audio_enable=yes
 	input_enable=yes
+	uinput_enable=yes
 	serial_enable=yes
 	network_enable=yes
 	sap_enable=no
@@ -239,6 +240,10 @@
 		input_enable=${enableval}
 	])
 
+	AC_ARG_ENABLE(uinput, AC_HELP_STRING([--disable-uinput], [disable uinput in AVCTP]), [
+		uinput_enable=${enableval}
+	])
+
 	AC_ARG_ENABLE(audio, AC_HELP_STRING([--disable-audio], [disable audio plugin]), [
 		audio_enable=${enableval}
 	])
@@ -376,6 +381,7 @@
 	AM_CONDITIONAL(GSTREAMER, test "${gstreamer_enable}" = "yes" && test "${gstreamer_found}" = "yes")
 	AM_CONDITIONAL(AUDIOPLUGIN, test "${audio_enable}" = "yes")
 	AM_CONDITIONAL(INPUTPLUGIN, test "${input_enable}" = "yes")
+	AM_CONDITIONAL(AVCP_UINPUT, test "${uinput_enable}" = "yes")
 	AM_CONDITIONAL(SERIALPLUGIN, test "${serial_enable}" = "yes")
 	AM_CONDITIONAL(NETWORKPLUGIN, test "${network_enable}" = "yes")
 	AM_CONDITIONAL(SAPPLUGIN, test "${sap_enable}" = "yes")
Index: avrcp/audio/avctp.c
===================================================================
--- avrcp.orig/audio/avctp.c	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/audio/avctp.c	2015-02-02 01:14:04.972548291 -0800
@@ -49,7 +49,9 @@
 
 #include "log.h"
 #include "error.h"
+#ifdef AVCTP_UINPUT
 #include "uinput.h"
+#endif
 #include "btio.h"
 #include "manager.h"
 #include "device.h"
@@ -134,7 +136,9 @@
 
 	avctp_state_t state;
 
+#ifdef AVCTP_UINPUT
 	int uinput;
+#endif
 
 	GIOChannel *io;
 	guint io_id;
@@ -152,20 +156,22 @@
 	unsigned int id;
 };
 
+#ifdef AVCTP_UINPUT
 static struct {
 	const char *name;
 	uint8_t avc;
 	uint16_t uinput;
 } key_map[] = {
-	{ "PLAY",		PLAY_OP,		KEY_PLAYCD },
-	{ "STOP",		STAVC_OP_OP,		KEY_STOPCD },
-	{ "PAUSE",		PAUSE_OP,		KEY_PAUSECD },
-	{ "FORWARD",		FORWARD_OP,		KEY_NEXTSONG },
+	{ "PLAY",			PLAY_OP,			KEY_PLAYCD },
+	{ "STOP",			STAVC_OP_OP,		KEY_STOPCD },
+	{ "PAUSE",			PAUSE_OP,			KEY_PAUSECD },
+	{ "FORWARD",		FORWARD_OP,			KEY_NEXTSONG },
 	{ "BACKWARD",		BACKWARD_OP,		KEY_PREVIOUSSONG },
-	{ "REWIND",		REWIND_OP,		KEY_REWIND },
+	{ "REWIND",			REWIND_OP,			KEY_REWIND },
 	{ "FAST FORWARD",	FAST_FORWARD_OP,	KEY_FASTFORWARD },
 	{ NULL }
 };
+#endif
 
 static GSList *callbacks = NULL;
 static GSList *servers = NULL;
@@ -174,6 +180,7 @@
 
 static void auth_cb(DBusError *derr, void *user_data);
 
+#ifdef AVCTP_UINPUT
 static int send_event(int fd, uint16_t type, uint16_t code, int32_t value)
 {
 	struct uinput_event event;
@@ -194,6 +201,7 @@
 	send_event(fd, EV_KEY, key, pressed);
 	send_event(fd, EV_SYN, SYN_REPORT, 0);
 }
+#endif
 
 static size_t handle_panel_passthrough(struct avctp *session,
 					uint8_t transaction, uint8_t *code,
@@ -218,7 +226,7 @@
 		status = "pressed";
 		pressed = 1;
 	}
-
+#ifdef AVCTP_UINPUT
 	for (i = 0; key_map[i].name != NULL; i++) {
 		uint8_t key_quirks;
 
@@ -251,6 +259,9 @@
 		*code = AVC_CTYPE_NOT_IMPLEMENTED;
 		return 0;
 	}
+#else
+	DBG("AV/C: button 0x%02X %s", operands[0] & 0x7F, status);
+#endif
 
 done:
 	*code = AVC_CTYPE_ACCEPTED;
@@ -345,7 +356,7 @@
 								session);
 		}
 	}
-
+#ifdef AVCTP_UINPUT
 	if (session->uinput >= 0) {
 		char address[18];
 
@@ -356,7 +367,7 @@
 		close(session->uinput);
 		session->uinput = -1;
 	}
-
+#endif
 	server = session->server;
 	server->sessions = g_slist_remove(server->sessions, session);
 	g_slist_free_full(session->handlers, g_free);
@@ -416,7 +427,7 @@
 	for (l = session->handlers; l; l = l->next) {
 		struct avctp_rsp_handler *handler = l->data;
 
-		if (handler->id != avctp->transaction)
+		if ((handler->id & 0x0f)!= avctp->transaction)
 			continue;
 
 		if (handler->func && handler->func(session, avc->code,
@@ -534,6 +545,7 @@
 	return FALSE;
 }
 
+#ifdef AVCTP_UINPUT
 static int uinput_create(char *name)
 {
 	struct uinput_dev dev;
@@ -612,6 +624,7 @@
 	else
 		DBG("AVRCP: uinput initialized for %s", address);
 }
+#endif
 
 static void avctp_connect_cb(GIOChannel *chan, GError *err, gpointer data)
 {
@@ -621,6 +634,7 @@
 	GError *gerr = NULL;
 
 	if (err) {
+		DBG("AVCTP session %p got disconnected err=%s", session, err->message);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
 		error("%s", err->message);
 		return;
@@ -631,6 +645,7 @@
 			BT_IO_OPT_IMTU, &imtu,
 			BT_IO_OPT_INVALID);
 	if (gerr) {
+		DBG("AVCTP session %p got disconnected gerr=%s", session, gerr->message);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
 		error("%s", gerr->message);
 		g_error_free(gerr);
@@ -642,7 +657,9 @@
 	if (!session->io)
 		session->io = g_io_channel_ref(chan);
 
+#ifdef AVCTP_UINPUT
 	init_uinput(session);
+#endif
 
 	avctp_set_state(session, AVCTP_STATE_CONNECTED);
 	session->mtu = imtu;
@@ -663,12 +680,14 @@
 
 	if (derr && dbus_error_is_set(derr)) {
 		error("Access denied: %s", derr->message);
+		DBG("AVCTP session %p got disconnected access denied %s", session, derr->message);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
 		return;
 	}
 
 	if (!bt_io_accept(session->io, avctp_connect_cb, session,
 								NULL, &err)) {
+		DBG("AVCTP session %p got %s", session, err->message);
 		error("bt_io_accept: %s", err->message);
 		g_error_free(err);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
@@ -790,8 +809,10 @@
 drop:
 	if (!session || !session->io)
 		g_io_channel_shutdown(chan, TRUE, NULL);
-	if (session)
+	if (session) {
+		DBG("AVCTP session %p dropped", session);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
+	}
 }
 
 static GIOChannel *avctp_server_socket(const bdaddr_t *src, gboolean master)
@@ -927,7 +948,7 @@
 	return 0;
 }
 
-static int avctp_send(struct avctp *session, uint8_t transaction, uint8_t cr,
+int avctp_send(struct avctp *session, uint8_t transaction, uint8_t cr,
 				uint8_t code, uint8_t subunit, uint8_t opcode,
 				uint8_t *operands, size_t operand_count)
 {
@@ -997,7 +1018,23 @@
 
 	id++;
 
-	return 0;
+	return handler->id;
+}
+
+gboolean avctp_remove_session_cb(struct avctp *session, unsigned int id)
+{
+	GSList *l;
+
+	for (l = session->handlers; l != NULL; l = l->next) {
+		struct avctp_rsp_handler *cb = l->data;
+		if (cb && cb->id == id) {
+			session->handlers = g_slist_remove(callbacks, cb);
+			g_free(cb);
+			return TRUE;
+		}
+	}
+
+	return FALSE;
 }
 
 unsigned int avctp_add_state_cb(avctp_state_cb cb, void *user_data)
@@ -1090,6 +1127,7 @@
 				BT_IO_OPT_PSM, AVCTP_PSM,
 				BT_IO_OPT_INVALID);
 	if (err) {
+		DBG("AVCTP session %p got %s", session, err->message);
 		avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
 		error("%s", err->message);
 		g_error_free(err);
@@ -1105,7 +1143,7 @@
 {
 	if (!session->io)
 		return;
-
+	DBG("AVCTP diconnect");
 	avctp_set_state(session, AVCTP_STATE_DISCONNECTED);
 }
 
Index: avrcp/audio/avctp.h
===================================================================
--- avrcp.orig/audio/avctp.h	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/audio/avctp.h	2015-02-02 01:14:13.488590520 -0800
@@ -104,3 +104,7 @@
 					uint8_t subunit, uint8_t *operands,
 					size_t operand_count,
 					avctp_rsp_cb func, void *user_data);
+gboolean avctp_remove_session_cb(struct avctp *session, unsigned int id);
+int avctp_send(struct avctp *session, uint8_t transaction, uint8_t cr,
+				uint8_t code, uint8_t subunit, uint8_t opcode,
+				uint8_t *operands, size_t operand_count);
Index: avrcp/audio/avrcp.c
===================================================================
--- avrcp.orig/audio/avrcp.c	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/audio/avrcp.c	2015-02-02 01:14:24.124643261 -0800
@@ -1462,7 +1462,8 @@
 
 	DBG("volume=%u", volume);
 
-	return avctp_send_vendordep_req(player->session, AVC_CTYPE_CONTROL,
-					AVC_SUBUNIT_PANEL, buf, sizeof(buf),
-					avrcp_handle_set_volume, player);
+	avctp_send_vendordep_req(player->session, AVC_CTYPE_CONTROL,
+			AVC_SUBUNIT_PANEL, buf, sizeof(buf),
+			avrcp_handle_set_volume, player);
+	return 0;
 }
Index: avrcp/audio/avrcp.h
===================================================================
--- avrcp.orig/audio/avrcp.h	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/audio/avrcp.h	2015-02-02 01:14:32.896686759 -0800
@@ -69,11 +69,19 @@
 #define AVRCP_PLAY_STATUS_ERROR		0xFF
 
 /* Notification events */
-#define AVRCP_EVENT_STATUS_CHANGED	0x01
-#define AVRCP_EVENT_TRACK_CHANGED	0x02
-#define AVRCP_EVENT_TRACK_REACHED_END	0x03
-#define AVRCP_EVENT_TRACK_REACHED_START	0x04
-#define AVRCP_EVENT_VOLUME_CHANGED	0x0d
+#define AVRCP_EVENT_STATUS_CHANGED		0x01
+#define AVRCP_EVENT_TRACK_CHANGED		0x02
+#define AVRCP_EVENT_TRACK_REACHED_END		0x03
+#define AVRCP_EVENT_TRACK_REACHED_START		0x04
+#define AVRCP_EVENT_PLAYBACK_POS_CHANGED	0x05
+#define AVRCP_EVENT_BATT_STATUS_CHANGED		0x06
+#define AVRCP_EVENT_SYSTEM_STATUS_CHANGED	0x07
+#define AVRCP_EVENT_PLAYER_APPLICATION_SETTING_CHANGED 0x08
+#define AVRCP_EVENT_NOW_PLAYING_CONTENT_CHANGED 0x09
+#define AVRCP_EVENT_AVAILABLE_PLAYERS_CHANGED	0x0a
+#define AVRCP_EVENT_ADDRESSED_PLAYER_CHANGED	0x0b
+#define AVRCP_EVENT_UIDS_CHANGED		0x0c
+#define AVRCP_EVENT_VOLUME_CHANGED		0x0d
 #define AVRCP_EVENT_LAST		AVRCP_EVENT_VOLUME_CHANGED
 
 struct avrcp_player_cb {
Index: avrcp/audio/control.c
===================================================================
--- avrcp.orig/audio/control.c	2015-02-02 01:10:17.411665000 -0800
+++ avrcp/audio/control.c	2015-02-02 01:15:14.036890762 -0800
@@ -56,14 +56,257 @@
 #include "dbus-common.h"
 
 static unsigned int avctp_id = 0;
+static unsigned int notify_cb_id = 0;
+
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+struct avrcp_header {
+	uint8_t company_id[3];
+	uint8_t pdu_id;
+	uint8_t packet_type:2;
+	uint8_t rsvd:6;
+	uint8_t params_len[2];
+} __attribute__ ((packed));
+#define AVRCP_HEADER_LENGTH 7
+
+#elif __BYTE_ORDER == __BIG_ENDIAN
+struct avrcp_header {
+	uint8_t company_id[3];
+	uint8_t pdu_id;
+	uint8_t rsvd:6;
+	uint8_t packet_type:2;
+	uint8_t params_len[2];
+} __attribute__ ((packed));
+#define AVRCP_HEADER_LENGTH 7
+
+#else
+#error "Unknown byte order"
+#endif
+
+#define AVCTP_COMMAND		0
+#define AVCTP_RESPONSE		1
+
+#define METADATA_COMAPNY_ID 	 0x001958
+#define PANNEL_SUBUNIT_ID        0x09
+
+#define GET_CAPABILITIES_PUD     							0x10	/* AV/C STATUS */
+#define LIST_PLAYER_APPLICATION_SETTING_ATTRIBUTES_PUD 		0x11	/* AV/C STATUS */
+#define LIST_PLAYER_APPLICATION_SETTING_VALUES_PUD  		0x12	/* AV/C STATUS */
+#define GET_CURRENT_PLAYER_APPLICATION_SETTING_VALUE_PUD  	0x13	/* AV/C STATUS */
+#define SET_PLAYER_APPLICATION_SETTING_VALUE_PUD  			0x14	/* AV/C CONTROL */
+#define GET_PLAYER_APPLICATION_SETTING_ATTRIBUTE_TEXT_PUD 	0x15	/* AV/C STATUS */
+#define GET_PLAYER_APPLICATION_SETTING_VALUE_TEXT_PUD  		0x16	/* AV/C STATUS */
+#define INFORM_DISPLAYABLE_CHARACTER_SET_PUD  				0x17	/* AV/C CONTROL */
+#define INFORM_BATTERY_STATUS_OF_CT_PUD  					0x18	/* AV/C CONTROL */
+#define GET_ELEMENT_ATTRIBUTES_PUD  						0x20	/* AV/C STATUS */
+#define GET_PLAYSTATUS_PUD  								0x30	/* AV/C STATUS */
+#define REGISTER_NOTIFICATION_PUD  							0x31	/* AV/C NOTIFY */
+#define REQUEST_CONTINUING_RESPONSE_PUD  					0x40	/* AV/C CONTROL */
+#define ABORT_CONTINUING_RESPONSE_PUD  						0x41	/* AV/C CONTROL */
+#define SET_ABSOLUTE_VOLUME_PUD  							0x50	/* AV/C CONTROL */
+#define SET_ADDRESSED_PLAYER_PUD  							0x60	/* AV/C CONTROL */
+#define GET_FOLDER_ITEMS_PUD  								0x71	/* Browsing */
+#define SET_BROWSED_PLAYER_PUD  							0x70	/* Browsing */
+#define CHANGE_PATH_PUD  									0x72	/* Browsing */
+#define GET_ITEM_ATTRIBUTES_PUD  							0x73	/* Browsing */
+#define PLAY_ITEM_PUD  										0x74	/* AV/C CONTROL */
+#define SEARCH_PUD  										0x80	/* Browsing */
+#define ADD_TO_NOW_PLAYING_PUD  							0x90	/* AV/C CONTROL */
+#define GENERAL_REJECT_PUD  								0xA0	/* Browsing */
+
+#define COMPANIES_CAPABILITY_ID  0x02
+#define EVENTS_CAPABILITY_ID  	 0x03
+
+#define EVENT_STATUS_CHANGED						0x01
+#define EVENT_TRACK_CHANGED							0x02
+#define EVENT_TRACK_REACHED_END						0x03
+#define EVENT_TRACK_REACHED_START					0x04
+#define EVENT_PLAYBACK_POS_CHANGED					0x05
+#define EVENT_BATT_STATUS_CHANGED					0x06
+#define EVENT_SYSTEM_STATUS_CHANGED					0x07
+#define EVENT_PLAYER_APPLICATION_SETTING_CHANGED	0x08
+#define EVENT_NOW_PLAYING_CONTENT_CHANGED			0x09
+#define EVENT_AVAILABLE_PLAYERS_CHANGED				0x0a
+#define EVENT_ADDRESSED_PLAYER_CHANGED				0x0b
+#define EVENT_UIDS_CHANGED							0x0c
+#define EVENT_VOLUME_CHANGED						0x0d
+
+#define BUTTON_ID_SELECT      0x00    /* select */
+#define BUTTON_ID_UP          0x01    /* up */
+#define BUTTON_ID_DOWN        0x02    /* down */
+#define BUTTON_ID_LEFT        0x03    /* left */
+#define BUTTON_ID_RIGHT       0x04    /* right */
+#define BUTTON_ID_RIGHT_UP    0x05    /* right-up */
+#define BUTTON_ID_RIGHT_DOWN  0x06    /* right-down */
+#define BUTTON_ID_LEFT_UP     0x07    /* left-up */
+#define BUTTON_ID_LEFT_DOWN   0x08    /* left-down */
+#define BUTTON_ID_ROOT_MENU   0x09    /* root menu */
+#define BUTTON_ID_SETUP_MENU  0x0A    /* setup menu */
+#define BUTTON_ID_CONT_MENU   0x0B    /* contents menu */
+#define BUTTON_ID_FAV_MENU    0x0C    /* favorite menu */
+#define BUTTON_ID_EXIT        0x0D    /* exit */
+#define BUTTON_ID_0           0x20    /* 0 */
+#define BUTTON_ID_1           0x21    /* 1 */
+#define BUTTON_ID_2           0x22    /* 2 */
+#define BUTTON_ID_3           0x23    /* 3 */
+#define BUTTON_ID_4           0x24    /* 4 */
+#define BUTTON_ID_5           0x25    /* 5 */
+#define BUTTON_ID_6           0x26    /* 6 */
+#define BUTTON_ID_7           0x27    /* 7 */
+#define BUTTON_ID_8           0x28    /* 8 */
+#define BUTTON_ID_9           0x29    /* 9 */
+#define BUTTON_ID_DOT         0x2A    /* dot */
+#define BUTTON_ID_ENTER       0x2B    /* enter */
+#define BUTTON_ID_CLEAR       0x2C    /* clear */
+#define BUTTON_ID_CHAN_UP     0x30    /* channel up */
+#define BUTTON_ID_CHAN_DOWN   0x31    /* channel down */
+#define BUTTON_ID_PREV_CHAN   0x32    /* previous channel */
+#define BUTTON_ID_SOUND_SEL   0x33    /* sound select */
+#define BUTTON_ID_INPUT_SEL   0x34    /* input select */
+#define BUTTON_ID_DISP_INFO   0x35    /* display information */
+#define BUTTON_ID_HELP        0x36    /* help */
+#define BUTTON_ID_PAGE_UP     0x37    /* page up */
+#define BUTTON_ID_PAGE_DOWN   0x38    /* page down */
+#define BUTTON_ID_POWER       0x40    /* power */
+#define BUTTON_ID_VOL_UP      0x41    /* volume up */
+#define BUTTON_ID_VOL_DOWN    0x42    /* volume down */
+#define BUTTON_ID_MUTE        0x43    /* mute */
+#define BUTTON_ID_PLAY        0x44    /* play */
+#define BUTTON_ID_STOP        0x45    /* stop */
+#define BUTTON_ID_PAUSE       0x46    /* pause */
+#define BUTTON_ID_RECORD      0x47    /* record */
+#define BUTTON_ID_REWIND      0x48    /* rewind */
+#define BUTTON_ID_FAST_FOR    0x49    /* fast forward */
+#define BUTTON_ID_EJECT       0x4A    /* eject */
+#define BUTTON_ID_FORWARD     0x4B    /* forward */
+#define BUTTON_ID_BACKWARD    0x4C    /* backward */
+#define BUTTON_ID_ANGLE       0x50    /* angle */
+#define BUTTON_ID_SUBPICT     0x51    /* subpicture */
+#define BUTTON_ID_F1          0x71    /* F1 */
+#define BUTTON_ID_F2          0x72    /* F2 */
+#define BUTTON_ID_F3          0x73    /* F3 */
+#define BUTTON_ID_F4          0x74    /* F4 */
+#define BUTTON_ID_F5          0x75    /* F5 */
+#define BUTTON_ID_VENDOR      0x7E    /* vendor unique */
+
+/*
+  { "PLAY",         BUTTON_ID_PLAY,     KEY_PLAYCD       },
+  { "STOP",         BUTTON_ID_STOP,     KEY_STOPCD       },
+  { "PAUSE",        BUTTON_ID_PAUSE,    KEY_PAUSECD      },
+  { "FORWARD",      BUTTON_ID_FORWARD,  KEY_NEXTSONG     },
+  { "BACKWARD",     BUTTON_ID_BACKWARD, KEY_PREVIOUSSONG },
+  { "REWIND",       BUTTON_ID_REWIND,   KEY_REWIND       },
+  { "FAST FORWARD", BUTTON_ID_FAST_FOR, KEY_FAST_FORWARD },
+ */
+
+struct GetCapabilitiesReq {
+	struct avrcp_header hdr;
+	uint8_t capability_id;
+};
+
+struct GetCapabilitiesResponse {
+	struct avrcp_header hdr;
+	uint8_t capability_id;
+	uint8_t capability_cnt;
+	uint8_t data[0];
+};
+
+struct RegisterNotificationReq {
+	struct avrcp_header hdr;
+	uint8_t event_id;
+	uint32_t report_interval;
+};
+
+struct RegisterNotificationResponse {
+	struct avrcp_header hdr;
+	uint8_t event_id;
+	uint8_t data[0];
+};
+
+struct GetElementAttributesReq {
+	struct avrcp_header hdr;
+	uint8_t element_id[8];
+	uint8_t num_attr_ids;
+	uint8_t data[0];
+};
 
 struct control {
 	struct audio_device *dev;
 	struct avctp *session;
 
+	gboolean in_call;
 	gboolean target;
 };
 
+struct msg_reply_ctx {
+	struct audio_device *dev;
+	DBusMessage *msg;
+};
+
+static void set_uid(uint8_t* data, uint64_t value) {
+	data[0] = value >> 56;
+	data[1] = value >> 48;
+	data[2] = value >> 40;
+	data[3] = value >> 32;
+	data[4] = value >> 24;
+	data[5] = value >> 16;
+	data[6] = value >> 8;
+	data[7] = value;
+}
+
+static void set_24_bit_be(uint8_t* data, uint32_t value) {
+	data[0] = value >> 16;
+	data[1] = value >> 8;
+	data[2] = value;
+}
+
+static void set_16_bit_be(uint8_t* data, uint16_t value) {
+	data[0] = value >> 8;
+	data[1] = value;
+}
+
+static uint32_t get_24_bit_be(uint8_t* data) {
+	return (data[0] << 16) | (data[1] << 8) | data[2];
+}
+
+static uint16_t get_16_bit_be(uint8_t* data) {
+	return (data[0] << 8) | data[1];
+}
+
+static void set_company_id(struct avrcp_header* hdr, uint32_t company_id) {
+	set_24_bit_be(hdr->company_id, company_id);
+}
+
+static void set_param_len(struct avrcp_header* hdr, uint16_t param_len) {
+	set_16_bit_be(hdr->params_len, param_len);
+}
+
+static uint32_t get_company_id(struct avrcp_header* hdr) {
+	return get_24_bit_be(hdr->company_id);
+}
+
+static uint16_t get_param_len(struct avrcp_header* hdr) {
+	return get_16_bit_be(hdr->params_len);
+}
+
+static struct msg_reply_ctx* create_reply_ctx(struct audio_device *dev, DBusMessage *msg) {
+	struct msg_reply_ctx* reply = g_new0(struct msg_reply_ctx, 1);
+	if (reply) {
+		reply->dev = dev;
+		reply->msg = msg;
+		if (msg)
+			dbus_message_ref(msg);
+	}
+	return reply;
+}
+
+static void free_reply_ctx(struct msg_reply_ctx* ctx) {
+	if (NULL != ctx) {
+		if (NULL != ctx->msg)
+			dbus_message_unref(ctx->msg);
+		g_free(ctx);
+	}
+}
+
 static void state_changed(struct audio_device *dev, avctp_state_t old_state,
 				avctp_state_t new_state, void *user_data)
 {
@@ -72,7 +315,12 @@
 
 	switch (new_state) {
 	case AVCTP_STATE_DISCONNECTED:
+		if (0 != notify_cb_id && control->session) {
+			avctp_remove_session_cb(control->session, notify_cb_id);
+			notify_cb_id = 0;
+		}
 		control->session = NULL;
+		control->in_call = 0;
 
 		if (old_state != AVCTP_STATE_CONNECTED)
 			break;
@@ -148,6 +396,32 @@
 	return dbus_message_new_method_return(msg);
 }
 
+static DBusMessage *send_button(DBusConnection *conn, DBusMessage *msg,
+								void *data)
+{
+	struct audio_device *device = data;
+	struct control *control = device->control;
+	int err;
+
+	if (!control->session)
+		return btd_error_not_connected(msg);
+
+	if (!control->target)
+		return btd_error_not_supported(msg);
+
+	uint32_t button_code;
+
+	if (!dbus_message_get_args(msg, NULL, DBUS_TYPE_BYTE, &button_code,
+							DBUS_TYPE_INVALID))
+		return btd_error_invalid_args(msg);
+
+	err = avctp_send_passthrough(control->session, button_code);
+	if (err < 0)
+		return btd_error_failed(msg, strerror(-err));
+
+	return dbus_message_new_method_return(msg);
+}
+
 static DBusMessage *volume_down(DBusConnection *conn, DBusMessage *msg,
 								void *data)
 {
@@ -168,6 +442,106 @@
 	return dbus_message_new_method_return(msg);
 }
 
+static gboolean get_capabilities_cb (struct avctp *session, uint8_t code,
+					uint8_t subunit, uint8_t *operands,
+					size_t operand_count, void *user_data) {
+	int idx;
+	struct msg_reply_ctx* ctx = (struct msg_reply_ctx*)user_data;
+	struct GetCapabilitiesResponse* response;
+	DBusMessage *reply;
+
+	ctx->dev->control->in_call = 0;
+
+	if (code != AVC_CTYPE_STABLE) {
+		reply = btd_error_not_supported(ctx->msg);
+		g_dbus_send_message(ctx->dev->conn, reply);
+		goto exit;
+	}
+	if (operand_count < sizeof(struct GetCapabilitiesResponse)) {
+		reply = btd_error_failed(ctx->msg, "Invalid response.");
+		g_dbus_send_message(ctx->dev->conn, reply);
+		goto exit;
+	}
+	response = (struct GetCapabilitiesResponse*)operands;
+	if (response->hdr.pdu_id != GET_CAPABILITIES_PUD ||
+		(response->capability_id != COMPANIES_CAPABILITY_ID &&
+		 response->capability_id != EVENTS_CAPABILITY_ID)) {
+		reply = btd_error_failed(ctx->msg, "Invalid response.");
+		g_dbus_send_message(ctx->dev->conn, reply);
+		goto exit;
+	}
+	int operand_size = (response->capability_id == COMPANIES_CAPABILITY_ID) ? 3 : 1;
+
+	if (operand_count < sizeof(struct GetCapabilitiesResponse) +
+			operand_size * response->capability_cnt) {
+		reply = btd_error_failed(ctx->msg, "Invalid response.");
+		g_dbus_send_message(ctx->dev->conn, reply);
+		goto exit;
+	}
+
+	reply = dbus_message_new_method_return(ctx->msg);
+	if (reply) {
+		DBusMessageIter args;
+		DBusMessageIter array;
+		dbus_message_iter_init_append(reply, &args);
+
+		dbus_message_iter_open_container(&args, DBUS_TYPE_ARRAY,
+				(operand_size == 3) ? DBUS_TYPE_UINT32_AS_STRING : DBUS_TYPE_BYTE_AS_STRING,
+				&array);
+
+		for (idx = 0; idx < response->capability_cnt; ++idx) {
+			if (operand_size == 3) {
+				uint32_t value = get_24_bit_be(&response->data[idx * 3]);
+				dbus_message_iter_append_basic(&array, DBUS_TYPE_UINT32, &value);
+			} else {
+				dbus_message_iter_append_basic(&array, DBUS_TYPE_BYTE, &response->data[idx]);
+			}
+		}
+		dbus_message_iter_close_container(&args, &array);
+		g_dbus_send_message(ctx->dev->conn, reply);
+	}
+exit:
+	free_reply_ctx(ctx);
+	return 0;  // remove the handler from the list
+}
+
+static DBusMessage *get_notification_capabilities(DBusConnection *conn, DBusMessage *msg,
+								void *data)
+{
+	struct audio_device *device = data;
+	struct control *control = device->control;
+	static struct GetCapabilitiesReq request= {0};
+	struct msg_reply_ctx* ctx;
+	int err;
+
+	if (!control->session)
+		return btd_error_not_connected(msg);
+
+	if (!control->target)
+		return btd_error_not_supported(msg);
+
+	if (control->in_call) {
+		return btd_error_busy(msg);
+	}
+
+	ctx = create_reply_ctx(device, msg);
+	if (NULL == ctx)
+		return btd_error_failed(msg, "Out of memory.");
+
+	control->in_call = 1;
+	set_company_id(&request.hdr, METADATA_COMAPNY_ID);
+	request.hdr.packet_type = 0;
+	request.hdr.pdu_id = GET_CAPABILITIES_PUD;
+	set_param_len(&request.hdr, sizeof(struct GetCapabilitiesReq)
+			- sizeof(struct avrcp_header));
+	request.capability_id = EVENTS_CAPABILITY_ID;
+	avctp_send_vendordep_req(control->session, AVC_CTYPE_STATUS,
+			PANNEL_SUBUNIT_ID, (uint8_t*)&request, sizeof(request),
+			get_capabilities_cb, ctx);
+
+	return NULL;
+}
+
 static DBusMessage *control_get_properties(DBusConnection *conn,
 					DBusMessage *msg, void *data)
 {
@@ -206,6 +580,10 @@
 				control_get_properties) },
 	{ GDBUS_METHOD("VolumeUp", NULL, NULL, volume_up) },
 	{ GDBUS_METHOD("VolumeDown", NULL, NULL, volume_down) },
+	{ GDBUS_METHOD("SendButton",
+			GDBUS_ARGS({ "button", "y" }), NULL, send_button) },
+	{ GDBUS_ASYNC_METHOD("GetEventCapabilities", NULL,
+			GDBUS_ARGS({ "capabilities", "au" }), get_notification_capabilities) },
 	{ }
 };
 
@@ -214,6 +592,8 @@
 	{ GDBUS_DEPRECATED_SIGNAL("Disconnected", NULL) },
 	{ GDBUS_SIGNAL("PropertyChanged",
 			GDBUS_ARGS({ "name", "s" }, { "value", "v" })) },
+	{ GDBUS_SIGNAL("EventNotification",
+					GDBUS_ARGS({ "id", "u" }, { "data", "au" })) },
 	{ }
 };
 
@@ -259,6 +639,7 @@
 
 	control = g_new0(struct control, 1);
 	control->dev = dev;
+	control->in_call = 0;
 
 	control_update(control, uuid16);
 
